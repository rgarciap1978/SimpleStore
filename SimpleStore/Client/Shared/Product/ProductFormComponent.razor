@inject SweetAlertService Swal

<h3>@Title</h3>

<EditForm Model="Model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row row-cols-1 row-cols-md-2 g-2">
        <div class="col">
            <div class="mb-3 row">
                <label for="categories">Categoría:</label>
                <div class="col-sm-6 col-md-9">
                    <InputSelect @bind-Value="@Model.CategoryId" class="form-select" id="categories">
                        <option>-- Seleccione una categoría --</option>
                        @foreach (var item in Categories)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="mb-3 row">
                <label for="name" class="col-sm-2 col-md-4 col-form-label">Código SKU:</label>
                <div class="col-sm-6 col-md-9">
                    <InputText @bind-Value="@Model.SkuCode" class="form-control" id="sky_code" />
                    <ValidationMessage For="()=>Model.SkuCode" />
                </div>
            </div>
            <div class="mb-3 row">
                <label for="name" class="col-sm-2 col-md-4 col-form-label">Nombre:</label>
                <div class="col-sm-6 col-md-9">
                    <InputText @bind-Value="@Model.Name" class="form-control" id="name" />
                    <ValidationMessage For="()=>Model.Name" />
                </div>
            </div>
            <div class="mb-3 row">
                <label for="name" class="col-sm-2 col-md-4 col-form-label">Precio unitario:</label>
                <div class="col-sm-6 col-md-9">
                    <InputNumber @bind-Value="@Model.UnitPrice" class="form-control" id="unit_price" />
                    <ValidationMessage For="()=>Model.UnitPrice" />
                </div>
            </div>
            <div class="mb-3 row">
                <label for="name" class="col-sm-2 col-md-4 col-form-label">Comentarios:</label>
                <div class="col-sm-6 col-md-9">
                    <InputTextArea @bind-Value="@Model.Comment" class="form-control" id="comment" />
                    <ValidationMessage For="()=>Model.Comment" />
                </div>
            </div>
            <div class="mb-3 row">
                <label for="status" class="col-sm-2 col-form-label">Estado:</label>
                <div class="col-sm-8">
                    <input class="form-check" type="checkbox" @bind="@Model.Status" />
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    @if(Model.Base64Image != null)
                    {
                        <div style="margin:10px">
                            <img src="data:image/jpeg;base64,@Model.Base64Image" alt="@Model.Name" width="200" height="200" />
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <InputFile class="btn btn-default" accept="image/png, image/jpeg, image/webp" OnChange="Upload" id="image" style="display:none;" />
                    <label for="image" class="btn btn-default">
                        <span class="oi oi-cloud-upload"></span>
                    </label>
                </div>
            </div>
        </div>
    </div>
    <button type="submit" class="btn btn-success">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
</EditForm>

@code {
    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = "Nuevo producto";

    [Parameter]
    [EditorRequired]
    public RequestDTOProduct Model { get; set; } = new RequestDTOProduct();

    [Parameter]
    [EditorRequired]
    public ICollection<ResponseDTOCategory> Categories { get; set; } = new List<ResponseDTOCategory>();

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback OnCancel { get; set; }

    public async void Upload(InputFileChangeEventArgs e)
    {
        try
        {
            var image = e.File;
            var buffer = new byte[image.Size];
            var _ = await image.OpenReadStream().ReadAsync(buffer);

            Model.Base64Image = Convert.ToBase64String(buffer);
            Model.FileName = image.Name;
            Model.Image = null;
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error al subir el archivo", ex.Message);
            throw;
        }
    }

    public void ValidSubmit()
    {
        OnValidSubmit.InvokeAsync();
    }

    public void Cancel()
    {
        OnCancel.InvokeAsync();
    }
}
