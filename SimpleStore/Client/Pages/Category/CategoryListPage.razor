@page "/category/list"

@inject ProxyCategory ProxyCategory
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<h3>Categorías</h3>

<button class="btn btn-success" @onclick="Add">
    Nuevo
</button>
<button class="btn btn-secondary" @onclick="Load" title="Refrescar">
    <i class="oi oi-reload" />
</button>

<CategoryListComponent @ref="CategoryListComponent" Data="CollectionCategory" OnDelete="OnDelete" OnEdit="OnEdit" OnSearch="OnSearch" >
    <Empty>
        <LoadingComponent IsLoading="IsLoading"></LoadingComponent>
    </Empty>
</CategoryListComponent>
<PaginatorComponent @ref="PaginatorComponent" PaginatorData="PagesCategory" OnChangePage="OnPageChange" OnChangeSizePage="OnChangeSizePage" />

@code {
    public ICollection<ResponseDTOCategory> CollectionCategory { get; set; } = default!;
    public CategoryListComponent CategoryListComponent { get; set; } = default!;
    public PaginatorComponent PaginatorComponent { get; set; } = default!;
    public PagedData<ResponseDTOCategory> PagesCategory { get; set; } = default!;
    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CollectionCategory = new List<ResponseDTOCategory>();
        PagesCategory = new PagedData<ResponseDTOCategory>()
            {
                CurrentPage = 1,
                RowsPerPage = 5
            };

        await Load();
    }

    private async Task Load()
    {
        try
        {
            IsLoading = true;
            var response = await ProxyCategory.ListAsync(CategoryListComponent?.Filter, PagesCategory.CurrentPage, PagesCategory.RowsPerPage);
            if (response.Success)
            {
                CollectionCategory = response.Data!;
                PagesCategory.Data = CollectionCategory;
                PagesCategory.Count = CollectionCategory.Count;
                PagesCategory.Total = response.Pages;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnSearch()
    {
        await Load();
    }

    private void OnEdit(int id)
    {
        NavigationManager.NavigateTo($"/category/edit/{id}");
    }

    private async Task OnDelete(int id)
    {
        await ProxyCategory.DeleteAsync(id);
        await Load();
    }

    private async Task OnPageChange()
    {
        IsLoading = true;
        await Load();
    }

    private async Task OnChangeSizePage()
    {
        PaginatorComponent.Data = PagesCategory;
        await Load();
    }

    private void Add()
    {
        NavigationManager.NavigateTo("/category/create");
    }
}
